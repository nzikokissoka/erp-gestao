Se a fotografia for grande em tamanho e dimensões, reduzir e enquadrar em 200x200 pixels. 
Se a tamanho e dimensões da fotografia forem inferiores a 200x200 pixels, fazer o enquadramento em 200x200 pixels. 


Para redimensionar e enquadrar uma fotografia em 200x200 pixels no JSF, 
independentemente das dimensões da imagem original, 
você pode usar a biblioteca de manipulação de imagens Java, 
como a Biblioteca Java de Imagens (JAI) ou a biblioteca Java Advanced Imaging (javax.media.jai). 
Vou fornecer um exemplo usando JAI:

Primeiro, você precisará configurar sua aplicação para usar a biblioteca JAI. 
Certifique-se de adicionar as dependências apropriadas ao seu projeto.

Aqui está um exemplo simplificado do processo para redimensionar e enquadrar uma imagem em 200x200 pixels no JSF:



Crie um método em seu bean para redimensionar e enquadrar a imagem:

import javax.media.jai.PlanarImage;
import javax.media.jai.JAI;
import com.sun.media.jai.codec.ByteArraySeekableStream;

// ...

public void redimensionarEEnquadrarImagem() {
    try {
        byte[] imagemOriginal = obterImagemOriginal(); // Substitua isso pela lógica de obtenção da imagem original

        ByteArraySeekableStream stream = new ByteArraySeekableStream(imagemOriginal);
        PlanarImage image = JAI.create("stream", stream);

        int larguraOriginal = image.getWidth();
        int alturaOriginal = image.getHeight();

        int novaLargura = 200;
        int novaAltura = 200;

        if (larguraOriginal > novaLargura || alturaOriginal > novaAltura) {
            double escalaLargura = (double) novaLargura / larguraOriginal;
            double escalaAltura = (double) novaAltura / alturaOriginal;

            double escala = Math.min(escalaLargura, escalaAltura);

            int novaLarguraRedimensionada = (int) (larguraOriginal * escala);
            int novaAlturaRedimensionada = (int) (alturaOriginal * escala);

            image = PlanarImage.wrapRenderedImage(image.getRendering().createScaledRendering(novaLarguraRedimensionada, novaAlturaRedimensionada));
        }

        int x = (novaLargura - image.getWidth()) / 2;
        int y = (novaAltura - image.getHeight()) / 2;

        BufferedImage imagemFinal = image.getAsBufferedImage();
        BufferedImage imagemEnquadrada = new BufferedImage(novaLargura, novaAltura, imagemFinal.getType());

        Graphics2D g2d = imagemEnquadrada.createGraphics();
        g2d.setColor(Color.WHITE); // Preencha o fundo com branco (ou a cor desejada)
        g2d.fillRect(0, 0, novaLargura, novaAltura);
        g2d.drawImage(imagemFinal, x, y, null);
        g2d.dispose();

        byte[] imagemRedimensionada = converterParaBytes(imagemEnquadrada); // Implemente esse método para converter BufferedImage em bytes

        // Agora você pode salvar ou usar a imagem redimensionada como desejar
    } catch (Exception e) {
        // Lide com erros
    }
}



Este exemplo verifica se a imagem original é maior que 200x200 pixels. 
Se for, ele redimensiona a imagem para se encaixar nesse tamanho e a enquadra no centro. 
Se a imagem original for menor, ela ainda é enquadrada em 200x200 pixels. 
Certifique-se de ajustar o código para atender às suas necessidades específicas e de lidar com exceções adequadamente.

Lembre-se de que este exemplo usa a biblioteca JAI, 
que pode não estar disponível por padrão em todas as configurações do Java, portanto, 
você pode precisar adicioná-la às dependências do seu projeto. 
Certifique-se também de lidar com as operações de leitura, 
escrita e conversão de imagens de acordo com as necessidades da sua aplicação.






import javax.imageio.ImageIO;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.awt.image.BufferedImage;

// ...

public byte[] converterParaBytes(BufferedImage imagem) {
    try {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ImageIO.write(imagem, "jpg", baos); // Substitua "jpg" pelo formato de imagem desejado (por exemplo, "png", "jpeg", "gif", etc.)
        return baos.toByteArray();
    } catch (IOException e) {
        // Lide com erros, por exemplo, registrando ou lançando exceções
        e.printStackTrace();
    }

    return null; // Em caso de erro
}




import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

// ...

public byte[] obterImagemOriginal(String caminhoDoArquivo) {
    try {
        Path path = Path.of(caminhoDoArquivo);
        return Files.readAllBytes(path);
    } catch (IOException e) {
        // Lide com erros, por exemplo, registrando ou lançando exceções
        e.printStackTrace();
    }

    return null; // Em caso de erro
}




